name: Calibre News Conversion
run-name: 'Calibre News Conversion: ${{ github.ref_name }}'

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'  # 每天早上8点运行

permissions:
  contents: write  # 增加写入权限以便推送更改

jobs:
  converter:
    runs-on: ubuntu-latest
    env:
      output_dir: converted_ebooks
      publisher: bookfere.com
      author: Calibre News Delivery
      ext: ${{ secrets.FORMAT || 'epub' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean Previous Run
        run: |
          echo "🧹 Cleaning previous conversion results..."
          # 删除旧的输出目录和根目录的电子书
          rm -rf ${{ env.output_dir }} 
          find . -maxdepth 1 -name -name "*.${{ env.ext }}" -delete 2>/dev/null || true
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install Calibre
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1 libopengl0 libxcb-cursor0
          sudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin
      
      - name: Find Available Recipes
        run: |
          # 查找所有 recipe 文件
          find . -name "*.recipe" -type f > recipe_list.txt
          
          if [ ! -s recipe_list.txt ]; then
            echo "❌ No recipe files found"
            exit 1
          fi
          
          echo "📋 Found $(wc -l < recipe_list.txt) recipes:"
          cat recipe_list.txt
      
      - name: Convert Recipes to Ebooks
        run: |
          mkdir -p $output_dir
          total_success=0
          
                   
          while IFS= read -r recipe_file; do
            [ -z "$recipe_file" ] && continue
            
            base_name=$(basename "$recipe_file" .recipe)
            output_file="${base_name}.${ext}"
          
          echo "🔄 Converting: $recipe_file"
          
          # 准备转换参数
          args="--authors='$author' --publisher='$publisher'"
          
          # 添加封面（如果有）
          if [ -f "covers/${base_name}.png" ]; then
              args="$args --cover='covers/${base_name}.png'"
          fi
          
          # 执行转换
          if eval ebook-convert "'$recipe_file'" "'$output_file'" $args; then
              # 复制到输出目录备份
              cp "$output_file" "$output_dir/"
              echo "✅ Success: $output_file"
              ((total_success++))
          else
              echo "❌ Failed: $recipe_file"
          fi
          
          done < recipe_list.txt
          
          echo "📊 Conversion complete: $total_success ebooks generated"
          
          if [ $total_success -eq 0 ]; then
              echo "⚠️ No ebooks were produced"
          fi
      
      - name: Commit and Push Ebooks to Repository
        run: |
          echo "🚀 Committing new ebooks to repository..."
          
          # 配置 git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 查看当前状态
          echo "Current changes:"
          git status
          
          # 添加新建的电子书文件
          git add *."${ext}" 2>/dev/null || true
          
          # 检查是否有可提交的内容
          if git diff-index --quiet HEAD --; then
            echo "📝 No new ebooks to commit"
          else
            # 提交更改
            git commit -m "Add newly converted ebooks - $(date '+%Y-%m-%d %H:%M')"
          fi
          
          # 强制推送更改
          git push origin HEAD:${{ github.ref_name }} || echo "Push may have failed but workflow continues"
      
      - name: Show Final Results
        run: |
          echo "🎉 Final Results:"
          echo "Root directory ebooks:"
          ls -la *."${ext}" 2>/dev/null || echo "No ebooks in root directory"
      
      - name: Upload Artifact for Manual Download
        uses: actions/upload-artifact@v4
        with:
          name: News-Ebooks-${{ github.run_number }}
          path: "*.${ {env.ext}}}"
          retention-days: 7
      
      - name: Create Summary Report
        run: |
          echo "# 📚 Calibre News Conversion Report" > conversion_summary.md
          echo "" >> conversion_summary.md
          echo "**Run Number:** ${{ github.run_number }}" >> conversion_summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> conversion_summary.md
          echo "**Trigger:** ${{ github.event_name }}" >> conversion-directory.md
          echo "**Date:** $(date)" >> conversion_summary.md
          echo "" >> conversion_summary.md
          echo "## Generated Files:" >> conversion_summary.md
          ls -1 *."${ext}" 2>/dev/null | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "- $file ($size)" >> conversion_summary.md
